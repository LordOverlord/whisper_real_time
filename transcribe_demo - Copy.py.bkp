#! python3.7

import argparse
import os
import numpy as np
import speech_recognition as sr
import whisper
import torch

from datetime import datetime, timedelta, timezone
from queue import Queue
from time import sleep
from sys import platform


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--model", default="medium", help="Model to use (e.g., tiny, base, small, medium, large, large-v3, large-v3-turbo)")
    parser.add_argument("--input_device", default=None, help="Index or partial name of input device (use 'list' to show all)", type=str)
    parser.add_argument("--energy_threshold", default=1000,
                        help="Energy level for mic to detect.", type=int)
    parser.add_argument("--record_timeout", default=4,
                        help="How real time the recording is in seconds.", type=float)
    parser.add_argument("--phrase_timeout", default=6,
                        help="How much empty space between recordings before we "
                             "consider it a new line in the transcription.", type=float)
    parser.add_argument("--save_name", default="transcripcion",
                    help="Nombre base del archivo sin extensión.")
    parser.add_argument("--save_format", choices=["txt", "srt"], default="txt",
                    help="Formato del archivo: txt o srt.")
    if 'linux' in platform:
        parser.add_argument("--default_microphone", default='pulse',
                            help="Default microphone name for SpeechRecognition. "
                                 "Run this with 'list' to view available Microphones.", type=str)
    args = parser.parse_args()

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

    output_filename = f"{args.save_name}_{timestamp}.{args.save_format}"
    
    last_srt_end_time = 0.0

    # The last time a recording was retrieved from the queue.
    phrase_time = None
    # Thread safe Queue for passing data from the threaded recording callback.
    data_queue = Queue()
    # Bytes object which holds audio data for the current phrase
    phrase_bytes = bytes()
    # We use SpeechRecognizer to record our audio because it has a nice feature where it can detect when speech ends.
    recorder = sr.Recognizer()
    recorder.energy_threshold = args.energy_threshold
    # Definitely do this, dynamic energy compensation lowers the energy threshold dramatically to a point where the SpeechRecognizer never stops recording.
    recorder.dynamic_energy_threshold = False

    input_device = args.input_device
    device_index = None

    if input_device == "list":
        print("Available audio input devices:")
        for index, name in enumerate(sr.Microphone.list_microphone_names()):
            print(f"[{index}] {name}")
        return
    elif input_device is not None:
        for index, name in enumerate(sr.Microphone.list_microphone_names()):
            if input_device.isdigit():
                if int(input_device) == index:
                    device_index = index
                    break
            elif input_device.lower() in name.lower():
                device_index = index
                break

    source = sr.Microphone(sample_rate=16000, device_index=device_index)

    # Load / Download model
    model = args.model
    audio_model = whisper.load_model(model)

    record_timeout = args.record_timeout
    phrase_timeout = args.phrase_timeout

    transcription_txt = ['']
    transcription_srt = []

    with source:
        recorder.adjust_for_ambient_noise(source)

    def record_callback(_, audio:sr.AudioData) -> None:
        """
        Threaded callback function to receive audio data when recordings finish.
        audio: An AudioData containing the recorded bytes.
        """
        # Grab the raw bytes and push it into the thread safe queue.
        data = audio.get_raw_data()
        data_queue.put(data)

    # Create a background thread that will pass us raw audio bytes.
    # We could do this manually but SpeechRecognizer provides a nice helper.
    recorder.listen_in_background(source, record_callback, phrase_time_limit=record_timeout)

    # Cue the user that we're ready to go.
    print("Model loaded.\n")

    while True:
        try:
            now = datetime.now(timezone.utc)
            # Pull raw recorded audio from the queue.
            if not data_queue.empty():
                phrase_complete = False
                # If enough time has passed between recordings, consider the phrase complete.
                # Clear the current working audio buffer to start over with the new data.
                if phrase_time and now - phrase_time > timedelta(seconds=phrase_timeout):
                    phrase_bytes = bytes()
                    phrase_complete = True
                # This is the last time we received new audio data from the queue.
                phrase_time = now
                
                # Combine audio data from queue
                audio_data = b''.join(data_queue.queue)
                data_queue.queue.clear()

                # Add the new audio data to the accumulated data for this phrase
                phrase_bytes += audio_data

                # Convert in-ram buffer to something the model can use directly without needing a temp file.
                # Convert data from 16 bit wide integers to floating point with a width of 32 bits.
                # Clamp the audio stream frequency to a PCM wavelength compatible default of 32768hz max.
                audio_np = np.frombuffer(phrase_bytes, dtype=np.int16).astype(np.float32) / 32768.0

                # Read the transcription.
                # result = audio_model.transcribe(audio_np, fp16=torch.cuda.is_available())
                # text = result['text'].strip()
                text = ""
                try:
                    start = datetime.now()
                    result = audio_model.transcribe(
                        audio_np,
                        fp16=torch.cuda.is_available(),
                        #language='es',
                        temperature=0.0
                    )
                    end = datetime.now()
                    #print(f"⏱️ Tiempo de transcripción: {(end - start).total_seconds():.2f}s")
                    text = result['text'].strip()
                except Exception as e:
                     print(f"⚠️ Error en transcripción: {e}")

                # If we detected a pause between recordings, add a new item to our transcription.
                # Otherwise edit the existing one.
                if result and "segments" in result:
                    for seg in result["segments"]:
                        if seg["end"] <= last_srt_end_time:
                            continue  # ya fue transcrito
                        seg_text = seg["text"].strip()
                        if not seg_text:
                            continue
                        
                        # 📝 TXT
                        transcription_txt.append(seg_text)

                        # 🧾 SRT
                        start_sec = seg["start"]
                        end_sec = seg["end"]
                        start_time = str(timedelta(seconds=int(start_sec))).zfill(8) + ",000"
                        end_time = str(timedelta(seconds=int(end_sec))).zfill(8) + ",000"
                        transcription_srt.append({
                            "index": len(transcription_srt) + 1,
                            "start": start_time,
                            "end": end_time,
                            "text": seg_text
                        })
                        last_srt_end_time = max(last_srt_end_time, seg["end"])
                    else:
                        transcription_txt[-1] = text
                # Guardar transcripción si se especificó un archivo
                if args.save_format == "txt":
                    try:
                        with open(output_filename, "w", encoding="utf-8") as f:
                            for line in transcription_txt:
                                f.write(f"{line}\n")
                    except Exception as e:
                        print(f"⚠️ No se pudo guardar el archivo TXT: {e}")

                elif args.save_format == "srt":
                    try:
                        with open(output_filename, "w", encoding="utf-8") as f:
                            for block in transcription_srt:
                                f.write(f"{block['index']}\n{block['start']} --> {block['end']}\n{block['text']}\n\n")
                    except Exception as e:
                        print(f"⚠️ No se pudo guardar el archivo SRT: {e}")

                # Clear the console to reprint the updated transcription.
                os.system('cls' if os.name=='nt' else 'clear')
                if args.save_format == "txt":
                    for line in transcription_txt:
                        print(line)
                elif args.save_format == "srt":
                    for block in transcription_srt:
                        print(f"[{block['start']} - {block['end']}] {block['text']}")
                # Flush stdout.
                print('', end='', flush=True)
            else:
                # Infinite loops are bad for processors, must sleep.
                sleep(0.25)
        except KeyboardInterrupt:
            break

    print("\n\nTranscription:")
    if args.save_format == "txt":
        for line in transcription_txt:
            print(line)
    elif args.save_format == "srt":
        for block in transcription_srt:
            print(f"[{block['start']} - {block['end']}] {block['text']}")


if __name__ == "__main__":
    main()
